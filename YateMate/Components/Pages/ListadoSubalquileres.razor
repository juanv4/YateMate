@page "/ListadoSubalquileres"
@rendermode InteractiveServer
@using YateMate.Aplicacion.UseCases.Subalquiler
@using YateMate.Components.Shared
@inject IDialogService Dialog
@inject ObtenerSubalquileresUseCase ObtenerSubalquileresUseCase
@inject ObtenerDuenioSubalquilerUseCase ObtenerDuenio
@inject FiltrarPorTamanioUseCase FiltrarPorTamanio
@inject FiltrarPorFechaUseCase FiltrarPorFecha
@rendermode InteractiveServer

<MudDialogProvider  FullWidth="true"
                    MaxWidth="MaxWidth.Small"
                    Position="DialogPosition.CenterLeft"/>

<h1>Subalquileres disponibles</h1>
<title>Subalquileres</title>

    @if (!_tieneElementos)
    {
    <h2>No hay subalquileres disponibles.</h2>
    }
    else
    {
            <MudGrid>
                <MudItem sm="12" md="6">
                    <h5>Filtrar por fecha</h5>
                    <MudStack>
                        <MudDateRangePicker PickerVariant="PickerVariant.Dialog" @bind-DateRange="_dateRange"  MinDate="DateTime.Now"/>
                    </MudStack>
                </MudItem>
                <MudItem sm="12" md="6">
                    <h5>Filtrar por Tamaño</h5>

                    <MudToggleGroup T="TamanioEstandar" SelectionMode="SelectionMode.MultiSelection" @bind-Values="opciones" Color="Color.Secondary" CheckMark Vertical Outline="false">
                        @foreach (TamanioEstandar tam in Enum.GetValues(typeof(TamanioEstandar)))
                        {
                            <MudToggleItem T="TamanioEstandar" Value="@tam" UnselectedIcon="@Icons.Material.Filled.CheckBoxOutlineBlank" SelectedIcon="@Icons.Material.Filled.CheckBox">
                                @(tam.ToString())
                            </MudToggleItem>
                        }
                    </MudToggleGroup>

                </MudItem>
                <MudItem sm="12" md="6">
                    <MudButton Variant="Variant.Filled" DisableElevation="true" Color="Color.Primary" OnClick="AplicarFiltros">Aplicar filtros</MudButton>
                    <MudButton Variant="Variant.Outlined" DisableElevation="true" Color="Color.Primary" OnClick="BorrarFiltros">Borrar filtros</MudButton>
                </MudItem>
            </MudGrid>
        @if (_lista.Count==0)
        {
            <h2>No hay subalquileres que cumplan con los requisitos.</h2>
        }
        else
        {
            <MudTable Items="_lista" Class="mt-4" Dense="true" Outlined="true">
                <HeaderContent>
                    <MudTh>Fecha de inicio</MudTh>
                    <MudTh>Fecha de fin</MudTh>
                    <MudTh>Dueño</MudTh>
                    <MudTh>Acción</MudTh>
                </HeaderContent>
                <RowTemplate>
                    <MudTd>
                        @context.FechaInicio.ToString("d")
                    </MudTd>
                    <MudTd>
                        @context.FechaFin.ToString("d")
                    </MudTd>
                    @{
                        duenio = ObtenerDuenio.Ejecutar(context.IdDuenio);
                    }
                    <MudTd>
                        @duenio.Nombre @duenio.Apellido
                    </MudTd>
                    <MudTd>
                        <MudButton Variant="Variant.Filled" Color="Color.Primary" OnClick="@(() => VerSubalquiler(@context))">Ver Mas </MudButton>
                    </MudTd>
                </RowTemplate>
            </MudTable>
        }
    }
</MudContainer>
@code {
    List<Subalquiler> _lista = new();
    List<Subalquiler> _listaOriginal = new();

    bool _tieneElementos;
    private DateRange _dateRange { get; set; }
    private IEnumerable<TamanioEstandar> opciones = new List<TamanioEstandar>();
    ApplicationUser duenio;

    protected override void OnInitialized()
    {
        _listaOriginal = ObtenerSubalquileresUseCase.Ejecutar();
        _lista = new List<Subalquiler>(_listaOriginal);
        _tieneElementos = _lista.Count > 0;
    }

    public void VerSubalquiler(Subalquiler subalquiler)
    {
        var options = new DialogOptions { CloseOnEscapeKey = true };
        var parameters = new DialogParameters<VerDatosSubalquilerPublicado>();
        parameters.Add(x => x.Subalquiler, subalquiler);
        Dialog.Show<VerDatosSubalquilerPublicado>("Ver Datos", parameters, options);
    }

    public void AplicarFiltros()
    {
        _lista = new List<Subalquiler>(_listaOriginal);
        if (opciones.Count() > 0)
            _lista = FiltrarPorTamanio.Ejecutar(_lista, opciones.ToList());
        if (_dateRange is { Start: not null, End: not null })
        {
            Console.WriteLine(_dateRange.Start);
            _lista = FiltrarPorFecha.Ejecutar(_lista, _dateRange.Start ?? DateTime.Now, _dateRange.End ?? DateTime.Now);
        }
    }

    public void BorrarFiltros()
    {
        opciones = new List<TamanioEstandar>();
        _dateRange = new DateRange();
        _lista = new List<Subalquiler>(_listaOriginal);
    }

}