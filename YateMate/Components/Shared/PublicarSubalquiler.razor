@* @page "/publicarSubalquiler" *@
@rendermode InteractiveServer
@using YateMate.Aplicacion.UseCases.Subalquiler
@inject AgregarSubalquilerUseCase AgregarSubalquilerUseCase
@inject ObtenerSubalquileresDeLaAmarraUseCase ObtenerSubalquileresDeLaAmarraUseCase 
@using System.ComponentModel.DataAnnotations
@using YateMate.Components.Account.Pages

<MudDialog>
    <TitleContent>
        <MudText Typo="Typo.h6" Style="display: flex; justify-content: center; width: 100%;">
            Publicar Subalquiler
        </MudText>
    </TitleContent>
    <DialogContent>
        
        <EditForm OnSubmit="HandleSubmit" EditContext="editContext" FormName="PublicarSubalquiler">
            <CustomValidator @ref="customValidator" ></CustomValidator>

            <div class="form-group">
                <label for="startDate">Fecha inicio:</label>
                <InputDate id="startDate"
                           @bind-Value="dateModel.FechaInicio"
                           class="form-control"
                           min="@DateTime.Now.ToString("yyyy-MM-dd")"/>
                <ValidationMessage For="@(() => dateModel.FechaInicio)"/>
            </div>

            <div class="form-group">
                <label for="endDate">Fecha fin:</label>
                <InputDate id="endDate"
                           @bind-Value="dateModel.FechaFin"
                           class="form-control"
                           min="@dateModel.FechaInicio.Value.ToString("yyyy-MM-dd")"/>
                <ValidationMessage For="@(() => dateModel.FechaFin)"/>
            </div>

            <button type="submit" class="btn btn-primary">Submit</button>
        </EditForm>
    </DialogContent>
    <DialogActions>
        <MudButton OnClick="Cancel" Style="margin-left: auto">Cerrar</MudButton>
    </DialogActions>
</MudDialog>

@code {
    
    [CascadingParameter] MudDialogInstance? MudDialog { get; set; }
    [Parameter] public string IdDuenio { get; set; }
    [Parameter] public int IdAmarra { get; set; }
    private EditContext? editContext;
    public CustomValidator customValidator;
    private Model dateModel = new Model();


    protected override void OnInitialized()
    {
        dateModel.FechaInicio = DateTime.Today;
        editContext = new(dateModel);
        // foreach (var property in dateModel.GetType().GetProperties()) //me cago en microsoft
        // {
        //     Console.WriteLine(property);
        // }
        // Console.WriteLine(IdDuenio);
        // Console.WriteLine(IdAmarra);

    }
    void ValidSubmit()
    {
        if (true)
        {
            var subalquiler = new Subalquiler(dateModel.FechaInicio.Value, dateModel.FechaFin.Value, IdDuenio, IdAmarra);
            AgregarSubalquilerUseCase.Ejecutar(subalquiler);
            MudDialog!.Close(DialogResult.Ok(true));
        }
            
    }
    
    void Cancel() => MudDialog!.Cancel();

    public void HandleSubmit()
    {
        customValidator.ClearErrors();
        var errors = new Dictionary<string, List<string>>();
        foreach (var property in dateModel.GetType().GetProperties()) //me cago en microsoft
        {
            var value = property.GetValue(dateModel);
            if (String.IsNullOrWhiteSpace(value?.ToString()))
            {
                Console.WriteLine($"el campo {property.Name} estaba vacio");
                errors.Add(property.Name, new List<string>() {"Este campo es obligatorio"});
            }
        }
        
        var subalquileresDeLaAmarra = ObtenerSubalquileresDeLaAmarraUseCase.Ejecutar(IdAmarra);
        var subalquilerInvalido =  subalquileresDeLaAmarra.Find(s => (s.FechaInicio >= dateModel.FechaInicio && s.FechaInicio <= dateModel.FechaFin));
        if (subalquilerInvalido is not null)
        {
            errors.Add("FechaInicio", new List<string>()
            {
                $"Fecha de inicio invalida, tenes un subalquiler publicado en el rango {subalquilerInvalido.FechaInicio:yyyy-MM-dd} - {subalquilerInvalido.FechaFin:yyyy-MM-dd}"
            });
            customValidator.DisplayErrors(errors);
            return;
        }
        
        subalquilerInvalido = subalquileresDeLaAmarra.Find(s => (s.FechaFin >= dateModel.FechaInicio && s.FechaFin <= dateModel.FechaFin));
        if (subalquilerInvalido is not null)
        {
            errors.Add("FechaFin", new List<string>(){$"Fecha de fin invalida, tenes un subalquiler publicado en el rango {subalquilerInvalido.FechaInicio:yyyy-MM-dd} - {subalquilerInvalido.FechaFin:yyyy-MM-dd}"});
            customValidator.DisplayErrors(errors);
            return;
        }
        
        if (errors.Count > 0)
        {
            Console.WriteLine($"hay {errors.Count} errores");
            foreach (var error in errors)
            {
                Console.WriteLine($"error {error.Key} {error.Value}");
            }
            customValidator.DisplayErrors(errors);
            return;
        }

        ValidSubmit();
    }

    public class Model
    {
        [Required(ErrorMessage = "Obligatorio.")]
        public DateTime? FechaInicio { get; set; }

        [Required(ErrorMessage = "obligatorio")]
        public DateTime? FechaFin { get; set; }
    }
}