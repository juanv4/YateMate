@using System.ComponentModel.DataAnnotations
@using YateMate.Aplicacion.UseCases.Reserva
@using YateMate.Aplicacion.UseCases.Subalquiler
@using System.ComponentModel.DataAnnotations
@using YateMate.Components.Account.Pages
@using YateMate.Components.Account.Pages.Manage

@inject NavigationManager Navegador
@inject ModificarReservaUseCase ModificarReservaUseCase
@inject ObtenerDuenioSubalquilerUseCase ObtenerDuenioSubalquilerUseCase
@inject ObtenerDuenioReservaUseCase ObtenerDuenioReservaUseCase
@inject ObtenerSubalquilerUseCase ObtenerSubalquilerUseCase
@inject EmailSender EmailSender

@rendermode InteractiveServer
<MudDialog>
    <TitleContent>
        <MudText Typo="Typo.h6" Style="display: flex; justify-content: center; width: 100%;">
            Editar reserva
        </MudText>
    </TitleContent>
    <DialogContent>
        <EditForm OnSubmit="HandleSubmit" EditContext="editContext" FormName="EditarReserva">
            <CustomValidator @ref="customValidator" ></CustomValidator>
            <div class="form-floating mb-3">
                <InputDate class="form-control" id="fechaInicio" @bind-Value="Model.FechaInicio" />
                <label for="fechaInicio">Fecha de inicio</label>
                <ValidationMessage For="() => Model.FechaInicio" class="text-danger" />
            </div>
            <div class="form-floating mb-3">
                <InputDate class="form-control" id="fechaFin" @bind-Value="Model.FechaFin" />
                <label for="fechaFin">Fecha de fin</label>
                <ValidationMessage For="() => Model.FechaFin" class="text-danger" />
            </div>
            <button type="submit" class="w-100 btn btn-lg btn-primary">Confirmar cambio</button>
        </EditForm>
    </DialogContent>
    <DialogActions>
        <MudButton OnClick="Cancel" Style="margin-left: auto">Cerrar</MudButton>
    </DialogActions>
</MudDialog>


@code{
    [Parameter] public Reserva Reserva { get; set; }
    [CascadingParameter] MudDialogInstance? MudDialog { get; set; }
    
    [CascadingParameter]
    private Task<AuthenticationState>? _AuthenticationState { get; set; }

    private string? _userId; 
    
    bool _esNuevoReserva = true;
    Subalquiler? _subalquiler;
    string _err = "";
    Reserva reservaQueVaABaseDeDatos;
    
    async Task Submit()
    {
        _subalquiler = ObtenerSubalquilerUseCase.Ejecutar(reservaQueVaABaseDeDatos.SubalquilerId);
        var mailDuenio = ObtenerDuenioSubalquilerUseCase.Ejecutar(_subalquiler.IdDuenio).Email;
        var duenioReserva = ObtenerDuenioReservaUseCase.Ejecutar(reservaQueVaABaseDeDatos.UsuarioId);
        // await EmailSender.SendMessageCambioReserva(mailDuenio, reservaQueVaABaseDeDatos, duenioReserva,_subalquiler);
        Navegador.Refresh(forceReload: true);
        MudDialog!.Close(DialogResult.Ok(true));
    }
    
    void Cancel() => MudDialog!.Cancel();
    
    [SupplyParameterFromForm] private InputModel Model { get; set; } = new();
    private EditContext? editContext;
    public CustomValidator customValidator;
    
    protected override void OnInitialized()
    {
        Model ??= new InputModel();
        Model.UsuarioId ??= Reserva.UsuarioId;
        Model.SubalquilerId ??= Reserva.SubalquilerId;
        Model.FechaInicio ??= Reserva.FechaInicio;
        Model.FechaFin ??= Reserva.FechaFin;
        editContext = new(Model);
    }
    
    public void HandleSubmit()
    {
        customValidator.ClearErrors();
        Model.UsuarioId = Reserva.UsuarioId;
        var errors = new Dictionary<string, List<string>>();
        foreach (var property in Model.GetType().GetProperties()) //me cago en microsoft
        {
            var value = property.GetValue(Model);
            if (String.IsNullOrWhiteSpace(value?.ToString()))
            {
                Console.WriteLine($"El campo {property.Name} estaba vacio");
                errors.Add(property.Name, new List<string>() {"Este campo es obligatorio"});
            }
        }
        if (errors.Count > 0)
        {
            Console.WriteLine($"Hay {errors.Count} errores");
            foreach (var error in errors)
            {
                Console.WriteLine($"Error {error.Key} {error.Value}");
            }
            customValidator.DisplayErrors(errors);
            return;
        }
        ValidSubmit();
    }
    
    public void ValidSubmit()
    {
        Model.UsuarioId = Reserva.UsuarioId;
        reservaQueVaABaseDeDatos = new Reserva(Model.SubalquilerId.Value, Model.UsuarioId, Model.FechaInicio.Value, Model.FechaFin.Value);
        reservaQueVaABaseDeDatos.Id = Reserva.Id;
        ModificarReservaUseCase.Ejecutar(reservaQueVaABaseDeDatos);
        Submit();
    }
    
    
    private sealed class InputModel
    {
        [Required(ErrorMessage = "Ingresa una fecha de inicio")]
        [Display(Name = "Fecha de inicio")]
        public DateTime? FechaInicio { get; set; }
    
        [Required(ErrorMessage = "Ingresa una fecha de fin")]
        [Display(Name = "Fecha de fin")]
        public DateTime? FechaFin { get; set; }

        public string? UsuarioId { get; set; } = null;
        public int? SubalquilerId { get; set; } = null;
    }

}